{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dasein/dev/explore_new/django-nextjs-realtime/frontend/pages/sensor/[serial_no]/index.tsx\";\nimport { useRouter } from \"next/router\";\nimport { useRef, useState, useEffect } from \"react\";\nimport Header from \"../../../components/header\";\nimport { apiCall } from \"../../../service/common\";\n\nconst Sensor = () => {\n  const router = useRouter();\n  const {\n    serial_no\n  } = router.query;\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  const {\n    0: APIError,\n    1: setAPIError\n  } = useState(null);\n  const {\n    0: socketMessages,\n    1: setSocketMessages\n  } = useState([]);\n  const webSocket = useRef(null);\n\n  const getSocketToken = async serial_no => {\n    let form_data = new FormData();\n    form_data.append(\"serial_no\", serial_no);\n    const res = await apiCall({\n      method: \"POST\",\n      url: \"/sensor/user_socket_token/\",\n      body: form_data\n    });\n\n    if (res == \"404\" || res == \"401\" || res == \"500\") {\n      // if API doen't return 404 or 500 this will be rendered\n      switch (res) {\n        case \"404\":\n          setAPIError(404);\n          break;\n\n        case \"500\":\n          setAPIError(500);\n          break;\n\n        case \"401\":\n          setAPIError(401);\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      setData(res);\n    }\n  };\n\n  useEffect(() => {\n    if (!serial_no) {\n      return;\n    } else {\n      getSocketToken(serial_no);\n    }\n  }, [router]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    webSocket.current = new WebSocket(`ws://localhost:8000/liveHeartbeatV1?&token=${data.websocket_token}`);\n\n    webSocket.current.onmessage = message => {\n      const obj = JSON.parse(message.data);\n      setSocketMessages([...socketMessages, obj]);\n    };\n\n    return () => webSocket.current.close();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        marginTop: \"60px\"\n      },\n      children: socketMessages && socketMessages.reverse().map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Sensor;","map":{"version":3,"sources":["/home/dasein/dev/explore_new/django-nextjs-realtime/frontend/pages/sensor/[serial_no]/index.tsx"],"names":["useRouter","useRef","useState","useEffect","Header","apiCall","Sensor","router","serial_no","query","data","setData","APIError","setAPIError","socketMessages","setSocketMessages","webSocket","getSocketToken","form_data","FormData","append","res","method","url","body","current","WebSocket","websocket_token","onmessage","message","obj","JSON","parse","close","width","height","marginTop","reverse","map"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\nimport { useRef, useState, useEffect } from \"react\";\nimport Header from \"../../../components/header\";\nimport { apiCall } from \"../../../service/common\";\n\nconst Sensor: React.SFC<{}> = () => {\n  const router = useRouter();\n  const { serial_no } = router.query;\n\n  const [data, setData] = useState(null);\n  const [APIError, setAPIError] = useState(null);\n  const [socketMessages, setSocketMessages] = useState([]);\n  const webSocket = useRef(null);\n\n  const getSocketToken = async (serial_no) => {\n    let form_data = new FormData();\n    form_data.append(\"serial_no\", serial_no);\n\n    const res = await apiCall({\n      method: \"POST\",\n      url: \"/sensor/user_socket_token/\",\n      body: form_data,\n    });\n\n    if (res == \"404\" || res == \"401\" || res == \"500\") {\n      // if API doen't return 404 or 500 this will be rendered\n      switch (res) {\n        case \"404\":\n          setAPIError(404);\n          break;\n\n        case \"500\":\n          setAPIError(500);\n          break;\n\n        case \"401\":\n          setAPIError(401);\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      setData(res);\n    }\n  };\n\n  useEffect(() => {\n    if (!serial_no) {\n      return;\n    } else {\n      getSocketToken(serial_no);\n    }\n  }, [router]);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    webSocket.current = new WebSocket(\n      `ws://localhost:8000/liveHeartbeatV1?&token=${data.websocket_token}`\n    );\n    webSocket.current.onmessage = (message) => {\n      const obj = JSON.parse(message.data);\n      setSocketMessages([...socketMessages, obj]);\n    };\n    return () => webSocket.current.close();\n  }, [data]);\n\n  return (\n    <>\n      <Header />\n      <div style={{ width: \"100%\", height: \"100%\", marginTop: \"60px\" }}>\n        {socketMessages && socketMessages.reverse().map}\n      </div>\n    </>\n  );\n};\n\nexport default Sensor;\n"]},"metadata":{},"sourceType":"module"}