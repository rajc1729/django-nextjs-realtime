{"ast":null,"code":"import { setCookie } from \"./cookie\";\nimport { apiBaseUrl } from \"../config/environment\";\n\nconst setLoginCookies = (accessToken, refreshToken, user) => {\n  setCookie(\"access_token\", accessToken, addMinutes(new Date(), 1440)); //1 day\n\n  setCookie(\"refresh_token\", refreshToken, addDays(new Date(), 1)); //14 Days\n\n  setCookie(\"username\", user.username, addMinutes(new Date(), 1440));\n  setCookie(\"email\", user.email, addMinutes(new Date(), 1440));\n  setCookie(\"uuid\", user.id, addMinutes(new Date(), 1440));\n};\n/**\n * Login with username and password\n * @param {string} username - User's username\n * @param {string} password - User's password\n */\n\n\nexport const loginWithUsername = async (username, password) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  urlencoded.append(\"username\", username);\n  urlencoded.append(\"password\", password);\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded\n  };\n  return fetch(`${apiBaseUrl.url}/rest-auth/login/`, requestOptions).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw response;\n    }\n  }).then(result => {\n    setLoginCookies(result.access_token, result.refresh_token, result.user);\n    return result;\n  }).catch(error => {\n    return error.json();\n  }).then(result => {\n    return result;\n  });\n};\n/**\n * Register directly w/ sign up form\n * @param {UserModel} userData - User's registration information\n */\n\nexport const signUpApiCall = async userData => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  Object.keys(userData).forEach(key => {\n    urlencoded.append(key, userData[key]);\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded\n  };\n  return fetch(`${apiBaseUrl.url}/rest-auth/registration/`, requestOptions).then(response => {\n    if (response.status === 201) {\n      return response.json();\n    } else {\n      throw response;\n    }\n  }).then(result => {\n    setLoginCookies(result.access_token, result.refresh_token, result.user);\n    return result;\n  }).catch(error => {\n    return error.json();\n  }).then(result => {\n    return result;\n  });\n};\n\nconst addMinutes = (dt, minutes) => {\n  return new Date(dt.getTime() + minutes * 60000);\n};\n\nconst addDays = (dt, days) => {\n  return new Date(dt.getTime() + days * 86400000);\n};\n\nexport const refreshToken = () => {};\nexport function signOut() {\n  setCookie(\"access_token\", null, addMinutes(new Date(), -1440));\n  setCookie(\"refresh_token\", null, addDays(new Date(), -14));\n  setCookie(\"username\", null);\n  setCookie(\"email\", null);\n  setCookie(\"uuid\", null);\n}\nexport const refreshTokenToAccessToken = refresh_token => {\n  if (refresh_token === null) {\n    return null;\n  }\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  urlencoded.append(\"refresh\", refresh_token);\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded\n  };\n  return fetch(`${apiBaseUrl.url}/api/token/refresh/`, requestOptions).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw response;\n    }\n  }).then(result => {\n    setCookie(\"access_token\", result.access, addMinutes(new Date(), 1440)); //1 day\n\n    return result;\n  }).catch(error => {\n    return {\n      error: error.json()\n    };\n  }).then(result => {\n    return result;\n  });\n};","map":{"version":3,"sources":["/home/dasein/dev/explore_new/django-nextjs-realtime/frontend/service/auth.ts"],"names":["setCookie","apiBaseUrl","setLoginCookies","accessToken","refreshToken","user","addMinutes","Date","addDays","username","email","id","loginWithUsername","password","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","fetch","url","then","response","status","json","result","access_token","refresh_token","catch","error","signUpApiCall","userData","Object","keys","forEach","key","dt","minutes","getTime","days","signOut","refreshTokenToAccessToken","access"],"mappings":"AAAA,SAASA,SAAT,QAAqC,UAArC;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAGA,MAAMC,eAAe,GAAG,CACtBC,WADsB,EAEtBC,YAFsB,EAGtBC,IAHsB,KAInB;AACHL,EAAAA,SAAS,CAAC,cAAD,EAAiBG,WAAjB,EAA8BG,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAb,CAAxC,CAAT,CADG,CACmE;;AACtEP,EAAAA,SAAS,CAAC,eAAD,EAAkBI,YAAlB,EAAgCI,OAAO,CAAC,IAAID,IAAJ,EAAD,EAAa,CAAb,CAAvC,CAAT,CAFG,CAE+D;;AAClEP,EAAAA,SAAS,CAAC,UAAD,EAAaK,IAAI,CAACI,QAAlB,EAA4BH,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAb,CAAtC,CAAT;AACAP,EAAAA,SAAS,CAAC,OAAD,EAAUK,IAAI,CAACK,KAAf,EAAsBJ,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAb,CAAhC,CAAT;AACAP,EAAAA,SAAS,CAAC,MAAD,EAASK,IAAI,CAACM,EAAd,EAAkBL,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAb,CAA5B,CAAT;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMK,iBAAiB,GAAG,OAAOH,QAAP,EAAyBI,QAAzB,KAA8C;AAC7E,MAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,mCAAjC;AACA,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AACAD,EAAAA,UAAU,CAACD,MAAX,CAAkB,UAAlB,EAA8BP,QAA9B;AACAQ,EAAAA,UAAU,CAACD,MAAX,CAAkB,UAAlB,EAA8BH,QAA9B;AACA,QAAMM,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAEP,SAFY;AAGrBQ,IAAAA,IAAI,EAAEL;AAHe,GAAvB;AAKA,SAAOM,KAAK,CAAE,GAAEtB,UAAU,CAACuB,GAAI,mBAAnB,EAAuCL,cAAvC,CAAL,CACJM,IADI,CACEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,KAFD,MAEO;AACL,YAAMF,QAAN;AACD;AACF,GAPI,EAQJD,IARI,CAQEI,MAAD,IAAY;AAChB3B,IAAAA,eAAe,CAAC2B,MAAM,CAACC,YAAR,EAAsBD,MAAM,CAACE,aAA7B,EAA4CF,MAAM,CAACxB,IAAnD,CAAf;AACA,WAAOwB,MAAP;AACD,GAXI,EAYJG,KAZI,CAYGC,KAAD,IAAW;AAChB,WAAOA,KAAK,CAACL,IAAN,EAAP;AACD,GAdI,EAeJH,IAfI,CAeEI,MAAD,IAAY;AAChB,WAAOA,MAAP;AACD,GAjBI,CAAP;AAkBD,CA7BM;AA+BP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,aAAa,GAAG,MAAOC,QAAP,IAAkC;AAC7D,MAAIrB,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,mCAAjC;AACA,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AAEAkB,EAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA+BC,GAAD,IAAS;AACrCtB,IAAAA,UAAU,CAACD,MAAX,CAAkBuB,GAAlB,EAAuBJ,QAAQ,CAACI,GAAD,CAA/B;AACD,GAFD;AAIA,QAAMpB,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAEP,SAFY;AAGrBQ,IAAAA,IAAI,EAAEL;AAHe,GAAvB;AAKA,SAAOM,KAAK,CAAE,GAAEtB,UAAU,CAACuB,GAAI,0BAAnB,EAA8CL,cAA9C,CAAL,CACJM,IADI,CACEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,KAFD,MAEO;AACL,YAAMF,QAAN;AACD;AACF,GAPI,EAQJD,IARI,CAQEI,MAAD,IAAY;AAChB3B,IAAAA,eAAe,CAAC2B,MAAM,CAACC,YAAR,EAAsBD,MAAM,CAACE,aAA7B,EAA4CF,MAAM,CAACxB,IAAnD,CAAf;AACA,WAAOwB,MAAP;AACD,GAXI,EAYJG,KAZI,CAYGC,KAAD,IAAW;AAChB,WAAOA,KAAK,CAACL,IAAN,EAAP;AACD,GAdI,EAeJH,IAfI,CAeEI,MAAD,IAAY;AAChB,WAAOA,MAAP;AACD,GAjBI,CAAP;AAkBD,CAhCM;;AAkCP,MAAMvB,UAAU,GAAG,CAACkC,EAAD,EAAWC,OAAX,KAA+B;AAChD,SAAO,IAAIlC,IAAJ,CAASiC,EAAE,CAACE,OAAH,KAAeD,OAAO,GAAG,KAAlC,CAAP;AACD,CAFD;;AAIA,MAAMjC,OAAO,GAAG,CAACgC,EAAD,EAAWG,IAAX,KAA4B;AAC1C,SAAO,IAAIpC,IAAJ,CAASiC,EAAE,CAACE,OAAH,KAAeC,IAAI,GAAG,QAA/B,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMvC,YAAY,GAAG,MAAM,CAAE,CAA7B;AAEP,OAAO,SAASwC,OAAT,GAAmB;AACxB5C,EAAAA,SAAS,CAAC,cAAD,EAAiB,IAAjB,EAAuBM,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,CAAC,IAAd,CAAjC,CAAT;AACAP,EAAAA,SAAS,CAAC,eAAD,EAAkB,IAAlB,EAAwBQ,OAAO,CAAC,IAAID,IAAJ,EAAD,EAAa,CAAC,EAAd,CAA/B,CAAT;AACAP,EAAAA,SAAS,CAAC,UAAD,EAAa,IAAb,CAAT;AACAA,EAAAA,SAAS,CAAC,OAAD,EAAU,IAAV,CAAT;AACAA,EAAAA,SAAS,CAAC,MAAD,EAAS,IAAT,CAAT;AACD;AAED,OAAO,MAAM6C,yBAAyB,GAAId,aAAD,IAA2B;AAClE,MAAIA,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAIjB,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,mCAAjC;AACA,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AACAD,EAAAA,UAAU,CAACD,MAAX,CAAkB,SAAlB,EAA6Be,aAA7B;AACA,QAAMZ,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAEP,SAFY;AAGrBQ,IAAAA,IAAI,EAAEL;AAHe,GAAvB;AAKA,SAAOM,KAAK,CAAE,GAAEtB,UAAU,CAACuB,GAAI,qBAAnB,EAAyCL,cAAzC,CAAL,CACJM,IADI,CACEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,KAFD,MAEO;AACL,YAAMF,QAAN;AACD;AACF,GAPI,EAQJD,IARI,CAQEI,MAAD,IAAY;AAChB7B,IAAAA,SAAS,CAAC,cAAD,EAAiB6B,MAAM,CAACiB,MAAxB,EAAgCxC,UAAU,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAb,CAA1C,CAAT,CADgB,CACwD;;AACxE,WAAOsB,MAAP;AACD,GAXI,EAYJG,KAZI,CAYGC,KAAD,IAAW;AAChB,WAAO;AAAEA,MAAAA,KAAK,EAAEA,KAAK,CAACL,IAAN;AAAT,KAAP;AACD,GAdI,EAeJH,IAfI,CAeEI,MAAD,IAAY;AAChB,WAAOA,MAAP;AACD,GAjBI,CAAP;AAkBD,CAhCM","sourcesContent":["import { setCookie, getCookie } from \"./cookie\";\nimport { apiBaseUrl } from \"../config/environment\";\nimport { RegisterUser, UserModel } from \"../models/types\";\n\nconst setLoginCookies = (\n  accessToken: string,\n  refreshToken: string,\n  user: UserModel\n) => {\n  setCookie(\"access_token\", accessToken, addMinutes(new Date(), 1440)); //1 day\n  setCookie(\"refresh_token\", refreshToken, addDays(new Date(), 1)); //14 Days\n  setCookie(\"username\", user.username, addMinutes(new Date(), 1440));\n  setCookie(\"email\", user.email, addMinutes(new Date(), 1440));\n  setCookie(\"uuid\", user.id, addMinutes(new Date(), 1440));\n};\n\n/**\n * Login with username and password\n * @param {string} username - User's username\n * @param {string} password - User's password\n */\nexport const loginWithUsername = async (username: string, password: string) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  urlencoded.append(\"username\", username);\n  urlencoded.append(\"password\", password);\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n  };\n  return fetch(`${apiBaseUrl.url}/rest-auth/login/`, requestOptions)\n    .then((response) => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        throw response;\n      }\n    })\n    .then((result) => {\n      setLoginCookies(result.access_token, result.refresh_token, result.user);\n      return result;\n    })\n    .catch((error) => {\n      return error.json();\n    })\n    .then((result) => {\n      return result;\n    });\n};\n\n/**\n * Register directly w/ sign up form\n * @param {UserModel} userData - User's registration information\n */\nexport const signUpApiCall = async (userData: RegisterUser) => {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n\n  Object.keys(userData).forEach((key) => {\n    urlencoded.append(key, userData[key]);\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n  };\n  return fetch(`${apiBaseUrl.url}/rest-auth/registration/`, requestOptions)\n    .then((response) => {\n      if (response.status === 201) {\n        return response.json();\n      } else {\n        throw response;\n      }\n    })\n    .then((result) => {\n      setLoginCookies(result.access_token, result.refresh_token, result.user);\n      return result;\n    })\n    .catch((error) => {\n      return error.json();\n    })\n    .then((result) => {\n      return result;\n    });\n};\n\nconst addMinutes = (dt: Date, minutes: number) => {\n  return new Date(dt.getTime() + minutes * 60000);\n};\n\nconst addDays = (dt: Date, days: number) => {\n  return new Date(dt.getTime() + days * 86400000);\n};\n\nexport const refreshToken = () => {};\n\nexport function signOut() {\n  setCookie(\"access_token\", null, addMinutes(new Date(), -1440));\n  setCookie(\"refresh_token\", null, addDays(new Date(), -14));\n  setCookie(\"username\", null);\n  setCookie(\"email\", null);\n  setCookie(\"uuid\", null);\n}\n\nexport const refreshTokenToAccessToken = (refresh_token: string) => {\n  if (refresh_token === null) {\n    return null;\n  }\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  urlencoded.append(\"refresh\", refresh_token);\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: urlencoded,\n  };\n  return fetch(`${apiBaseUrl.url}/api/token/refresh/`, requestOptions)\n    .then((response) => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        throw response;\n      }\n    })\n    .then((result) => {\n      setCookie(\"access_token\", result.access, addMinutes(new Date(), 1440)); //1 day\n      return result;\n    })\n    .catch((error) => {\n      return { error: error.json() };\n    })\n    .then((result) => {\n      return result;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}